#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <plinkio/plinkio.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_statistics_double.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_cdf.h>
#include <gsl/gsl_randist.h>
#include <gsl/gsl_vector.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_blas.h>
#include <gsl/gsl_linalg.h>

extern int status;
extern int statusPop;
extern int statusTrait;

extern struct pio_file_t InGenoPlink;
extern snp_t *SNPbuffer;

// Defined parameters
#define nMaxCausal 500000
#define nMaxPop 10
#define nMaxTrait 10
#define nMaxInd 2000000
#define nPCAsnp 10000
#define nMaxCovar 10
#define nMaxBetaGen 10000
#define nMaxInter 50 // max 50 for each trait
#define nMaxInterItem 1000 // nMaxInter * nMaxTrait * 2


extern gsl_rng * r;

// IO file names
extern char InCausal[1000];
extern char InInteract[1000];
extern char InRef[1000];
extern char InSample[1000];
extern char InGeno[1000];
extern char OutCausal[1000];
extern char OutPheno[1000];

extern int PolyFlag, BinaryFlag, CausalEffFlag, NoRefFlag, InterFlag;
extern double pCausal[nMaxTrait];
extern int CausalFlag[nMaxTrait];
extern char tmpPCausal[10000];
extern char tmpPleio[10000];
extern char tmpGenoEffProp[10000];
extern char tmpCovarEffProp[10000];
extern char tmpPopCorr[10000];
extern char tmpPrev[10000];
extern char tmpProb[10000];
extern char tmpWeight[10000];
extern char tmpTraitCorr[10000];
extern int nComp;
extern double * ProbComp;
extern double * wComp;

// GenoMat: nPop x nIndPerPop 
extern double PopMatTmp[nMaxPop][3][nMaxInd];
extern double GenoMat[nMaxInd];
extern double CovarMat[nMaxCovar][nMaxInd];
extern int PopIndicator[nMaxInd];
extern int nSamplePerPop[nMaxPop];
extern char PopList[nMaxPop][50];
extern char SampleList[nMaxInd][100];
extern char CausalList[nMaxTrait][nMaxCausal][50];
extern double CausalEff[nMaxTrait][nMaxCausal][2];

extern double CausalMAF[nMaxPop];
extern double CausalLDscore;
extern double CausalAnnot;
extern double CausalBeta[nMaxPop][nMaxTrait];
// double CovarBeta[nMaxPop][nMaxTrait];

// Include effects from shared causal variants (effect size generated by genetic correlation) and trait specific effects
extern double BaseBeta[nMaxPop][nMaxTrait]; // Population * Trait
extern double * GenoEff[nMaxTrait]; 
extern double * CovarEff[nMaxTrait]; // Covar Eff includes effect from PCs and non genetic covariates (user input)
extern double * EnvEff[nMaxTrait]; // Include corrlated noise and trait specific noise
extern double * InterEff[nMaxTrait]; // Include corrlated noise and trait specific noise
extern double * PhenoSim[nMaxTrait][2]; // 1--Continious measurement/liability 2--binary diagnosis

extern double GenoEffProp[nMaxPop][nMaxTrait];
extern double CovarEffProp[nMaxPop][nMaxTrait];
extern double EnvEffProp[nMaxPop][nMaxTrait];
extern double Prev[nMaxPop][nMaxTrait];
// Pleiotropy model with first trait as reference (how many causal SNPs shared with the first trait), starting with 1
extern double Pleio[nMaxTrait];
extern double TraitCorr[nMaxTrait][nMaxTrait]; // Only support positive genetic correlation now
extern double PopCorr[nMaxPop][nMaxPop];

extern gsl_matrix * GenoBeta;
extern gsl_matrix * SigmaTrait;
extern gsl_matrix * SigmaPop;
extern gsl_matrix * L;
extern gsl_vector * mu;

extern gsl_matrix * tmpCorrGenoBeta;
extern gsl_matrix * tmpL;

extern double VarGeno[nMaxPop][nMaxTrait];
extern double VarCovar[nMaxPop][nMaxTrait];
extern double VarEnv[nMaxPop][nMaxTrait];
extern double GCEweight[nMaxPop][3];
extern long int nCausal[nMaxTrait], nSample, nBetaIndex;
extern int nPop, nTrait, nItem, nValidItem, nCovar;
extern double a, b, c, prob;

extern char tmpBuff[20];

struct SNPinRef {
   char SNP[50];
   double AfricaMAF;
   double AfricaLDscore;
   int exon; // 1 -- yes, 0 -- no
   int DHS; // 1 -- yes, 0 -- no
};  
typedef struct SNPinRef SNPinfo;
extern SNPinfo RefSNP[26][200000];
extern long int SNPct[26];
extern char buffer[50000000];


struct InteractionItem {
   char Term1[50];
   char Term2[50];
   double InterEff;
};  
typedef struct InteractionItem InterItem;
extern int nTotInterItem;
extern InterItem InterList[nMaxTrait][nMaxInter];
extern char InterItemList[nMaxInterItem][50];
extern int nInter[nMaxTrait];
extern double ** InterItemMat;


void ReadParam(const char *ParIn);

void ExtractParam();

void MakeCovMat();

int PopIndex(char PopCode[50], int nPopCt);

void ReadPopulation();

void ReadCausal();

int FindInterItem(char item[50]);

void ReadInter();

void ReadRef();

long int findSNPinCausalList(char SNP[50], int k);

void BaseBetaGen();

void BaseBetaGet(double sigma);

void GetCovarEff();

void GetInterEff();

void GetEnvEff();

double IsCausal(char SNP[50]);

long int FindSNPinRef(char SNPname[50], int chr);

double GetMAF(int PopIndex);

double GetBeta(double BaseBeta, int PopIndex);

void AnalyzeSNP(int chr, char SNP[50]);
