using Test
using YAML
using Random

# Add the src directory to path so we can import necessary functions
push!(LOAD_PATH, joinpath(@__DIR__, "..", "src"))

# Import the run_geno.jl module which contains the generate_geno function
include(joinpath(@__DIR__, "..", "src", "run_geno.jl"))

@testset "Phenotype Generation Directory Creation" begin
    # Create a temporary directory for testing
    mktempdir() do test_dir
        # Create a minimal config file with necessary parameters for phenotype generation
        test_config = Dict(
            "filepaths" => Dict(
                "general" => Dict(
                    "output_dir" => test_dir,
                    "output_prefix" => "test-{chromosome}"
                ),
                "phenotype" => Dict(
                    "causal_list" => "none",
                    "reference_list" => "none",
                    "plink_override" => "none"
                )
            ),
            "phenotype_data" => Dict(
                "nPopulation" => "1",
                "nTrait" => "1",
                "a" => "1.0",
                "b" => "1.0",
                "c" => "1.0",
                "nComponent" => "1",
                "PropotionGeno" => "0.5",
                "PropotionCovar" => "0.0",
                "Causality" => Dict(
                    "UseCausalList" => false,
                    "Polygenicity" => "0.01",
                    "Pleiotropy" => "0.5"
                ),
                "TraitCorr" => "0.0",
                "PopulationCorr" => "0.0",
                "Prevalence" => "0.1",
                "Binary" => false,
                "CompWeight" => "1"
            ),
            "global_parameters" => Dict(
                "random_seed" => 42,
                "chromosome" => "1",
                "superpopulation" => "ALL"
            )
        )
        
        # Save the config file
        config_path = joinpath(test_dir, "test_config.yaml")
        open(config_path, "w") do io
            YAML.write(io, test_config)
        end
        
        # Create mock input files that generate_geno would expect
        sample_dir = joinpath(test_dir)
        mkpath(sample_dir)
        open(joinpath(sample_dir, "test-1.sample"), "w") do io
            println(io, "ID_1 ID_2 missing father mother sex phenotype pc1 pc2")
            println(io, "0 0 0 0 0 0 -9 0 0")
            println(io, "sample_1 sample_1 0 0 0 1 -9 0.1 0.2")
        end
        
        # Capture the original output directory state
        original_dirs = Set(readdir(test_dir))
        
        # Run the generate_geno function 
        try
            run_geno(config_path)
        catch e
            # The actual generate_pheno might fail if it requires more setup than we've done
            @info "Note: generate_pheno execution failed with: $e"
        end
        
        # Check what directories were created
        final_dirs = Set(readdir(test_dir))
        new_dirs = setdiff(final_dirs, original_dirs)
        
        @info "Directories created by generate_pheno: $new_dirs"
        
        # Test that the expected directories were created
        @test isdir(joinpath(test_dir, "evaluation")) || 
              any(d -> occursin("evaluation", d), new_dirs)
        @test isdir(joinpath(test_dir, "optimisation")) ||
              any(d -> occursin("optimisation", d), new_dirs)
        @test isdir(joinpath(test_dir, "reference")) ||
              any(d -> occursin("reference", d), new_dirs)
        
        # Also check for phenotype-specific output directories/files
        @test isfile(joinpath(test_dir, "test-1.pheno1")) || 
              any(f -> occursin(".pheno1", f), readdir(test_dir, join=true))
    end
end